package main

import (
	"fmt"
	"log"
	"os"
)

func generate_GoType() string {

	str := fmt.Sprintf(`
type DB%s struct {
`, tablename)

	for _, field := range schema {
		switch field.DataType {
		case "integer":
			str += fmt.Sprintf("  %s  int  `db:\"%s\"`\n", field.UpColumn, field.Column)
		case "character varying":
			str += fmt.Sprintf("  %s  string  `db:\"%s\"`\n", field.UpColumn, field.Column)
		case "text":
			str += fmt.Sprintf("  %s  string  `db:\"%s\"`\n", field.UpColumn, field.Column)
		case "boolean":
			str += fmt.Sprintf("  %s  bool  `db:\"%s\"`\n", field.UpColumn, field.Column)
		case "timestamp without time zone":
			str += fmt.Sprintf("  %s  dat.NullDate  `db:\"%s\"`\n", field.UpColumn, field.Column)
		case "numeric":
			str += fmt.Sprintf("  %s  float64  `db:\"%s\"`\n", field.UpColumn, field.Column)
		default:
			str += fmt.Sprintf("  %s  %s  `db:\"%s\"`\n", field.UpColumn, field.DataType, field.Column)
		}
	}
	str += fmt.Sprintf(`}
`)

	return str
}

func generate_Go_REST(listFile string) {

	f, err := os.Create(listFile)
	if err != nil {
		log.Fatalln("CreateFile:", listFile, err.Error())
	}
	defer f.Close()

	str := ""

	str += fmt.Sprintf(`package main

import (
  "github.com/labstack/echo"
  "net/http"
)

///////////////////////////////////////////////////////////////////////
//       Generated By codegen from SQL table %s
//        %s REST Functions
`, tablename, Tablename)

	str += generate_GoType()

	str += fmt.Sprintf(`   
func query%s(c *echo.Context) error {

  _, err := securityCheck(c, "read%s")
  if err != nil {
    return c.String(http.StatusUnauthorized, err.Error())
  }

  var records []*DB%s
  err = DB.
    Select(%s).
    From("%s").
    QueryStructs(&records)

  if err != nil {
    return c.String(http.StatusNoContent, err.Error())
  }
  return c.JSON(http.StatusOK, records)
}
`,
		Tablename,
		Tablename,
		tablename,
		column_names,
		tablename)

	str += fmt.Sprintf(`
func get%s(c *echo.Context) error {

  _, err := securityCheck(c, "read%s")
  if err != nil {
    return c.String(http.StatusUnauthorized, err.Error())
  }

  id := getID(c)
  var record DB%s
  err = DB.
    Select(%s).
    From("%s").
    Where("id = $1",id).
    QueryStruct(&record)

  if err != nil {
    return c.String(http.StatusNoContent, err.Error())
  }
  return c.JSON(http.StatusOK, record)
}
`,
		Tablename,
		Tablename,
		tablename,
		column_names,
		tablename)

	str += fmt.Sprintf(`   
func new%s(c *echo.Context) error {

  claim, err := securityCheck(c, "write%s")
  if err != nil {
    return c.String(http.StatusUnauthorized, err.Error())
  }

  record := &DB%s{}
  if err := c.Bind(record); err != nil {
    return c.String(http.StatusBadRequest, err.Error())
  }

  err = DB.InsertInto("%s").
    Whitelist(%s).
    Record(record).
    Returning("id").
    QueryScalar(&record.ID)

  if err != nil {
    return c.String(http.StatusInternalServerError, err.Error())
  }

  // TODO - edit and comment out the syslog line below
  // Now log the creation of the new site
  // sysLog(1, "%s", "X", record.ID, "%s Created", c, claim)

  // insert into DB, fill in the ID of the new user
  return c.JSON(http.StatusCreated, record)
}
`,
		Tablename,
		Tablename,
		tablename,
		tablename,
		column_names,
		Tablename,
		Tablename,
	)

	str += fmt.Sprintf(`
func save%s(c *echo.Context) error {

  claim, err := securityCheck(c, "write%s")
  if err != nil {
    return c.String(http.StatusUnauthorized, err.Error())
  }

  record := &DB%s{}
  if err = c.Bind(record); err != nil {
    return c.String(http.StatusBadRequest, err.Error())
  }

  id := getID(c)
  _, err = DB.Update("%s").
    SetWhitelist(record, %s).
    Where("id = $1", id).
    Exec()

  if err != nil {
    return c.String(http.StatusInternalServerError, err.Error())
  }

  // TODO - update this syslog record with the correct fields
  // sysLog(1, "%s", "T", id, "Updated", c, claim)
  return c.JSON(http.StatusOK, id)
}

`,
		Tablename,
		Tablename,
		tablename,
		tablename,
		column_names,
		Tablename,
	)

	str += fmt.Sprintf(`    
func delete%s(c *echo.Context) error {

  claim, err := securityCheck(c, "write%s")
  if err != nil {
    return c.String(http.StatusUnauthorized, err.Error())
  }

  id := getID(c)
  _, err = DB.
    DeleteFrom("%s").
    Where("id = $1", id).
    Exec()

  if err != nil {
    return c.String(http.StatusBadRequest, err.Error())
  }

  // TODO delete the part references
  // DB.DeleteFrom("linked_table").Where("%s_id=$1", id).Exec()

  // TODO update this syslog interface
  // sysLog(3, "%s", "T", id, "%s Deleted", c, claim)

  return c.String(http.StatusOK, "Component Deleted")
}
`,
		Tablename,
		Tablename,
		tablename,
		tablename,
		Tablename,
		Tablename,
	)

	f.WriteString(str)
	f.Sync()
}
